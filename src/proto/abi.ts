// @generated by protobuf-ts 2.6.0
// @generated from protobuf file "abi.proto" (package "abi", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message abi.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: string broker = 1;
     */
    broker: string;
    /**
     * @generated from protobuf field: string topic = 2;
     */
    topic: string;
}
/**
 * @generated from protobuf message abi.Request
 */
export interface Request {
    /**
     * @generated from protobuf oneof: request_cmd
     */
    requestCmd: {
        oneofKind: "addconfig";
        /**
         * @generated from protobuf field: abi.AddConfig addconfig = 1;
         */
        addconfig: AddConfig;
    } | {
        oneofKind: "listconfig";
        /**
         * @generated from protobuf field: abi.ListConfig listconfig = 2;
         */
        listconfig: ListConfig;
    } | {
        oneofKind: "pullmessage";
        /**
         * @generated from protobuf field: abi.PullMessage pullmessage = 3;
         */
        pullmessage: PullMessage;
    } | {
        oneofKind: "checkbroker";
        /**
         * @generated from protobuf field: abi.CheckBroker checkbroker = 4;
         */
        checkbroker: CheckBroker;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message abi.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: string status = 1;
     */
    status: string;
    /**
     * @generated from protobuf field: string data = 2;
     */
    data: string;
}
/**
 * @generated from protobuf message abi.AddConfig
 */
export interface AddConfig {
    /**
     * @generated from protobuf field: abi.Config cfg = 1;
     */
    cfg?: Config;
}
/**
 * @generated from protobuf message abi.CheckBroker
 */
export interface CheckBroker {
    /**
     * @generated from protobuf field: string broker = 1;
     */
    broker: string;
}
/**
 * @generated from protobuf message abi.ListConfig
 */
export interface ListConfig {
}
/**
 * @generated from protobuf message abi.PullMessage
 */
export interface PullMessage {
    /**
     * @generated from protobuf field: abi.Config cfg = 1;
     */
    cfg?: Config;
}
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("abi.Config", [
            { no: 1, name: "broker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = { broker: "", topic: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker */ 1:
                    message.broker = reader.string();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker = 1; */
        if (message.broker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.broker);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("abi.Request", [
            { no: 1, name: "addconfig", kind: "message", oneof: "requestCmd", T: () => AddConfig },
            { no: 2, name: "listconfig", kind: "message", oneof: "requestCmd", T: () => ListConfig },
            { no: 3, name: "pullmessage", kind: "message", oneof: "requestCmd", T: () => PullMessage },
            { no: 4, name: "checkbroker", kind: "message", oneof: "requestCmd", T: () => CheckBroker }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { requestCmd: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* abi.AddConfig addconfig */ 1:
                    message.requestCmd = {
                        oneofKind: "addconfig",
                        addconfig: AddConfig.internalBinaryRead(reader, reader.uint32(), options, (message.requestCmd as any).addconfig)
                    };
                    break;
                case /* abi.ListConfig listconfig */ 2:
                    message.requestCmd = {
                        oneofKind: "listconfig",
                        listconfig: ListConfig.internalBinaryRead(reader, reader.uint32(), options, (message.requestCmd as any).listconfig)
                    };
                    break;
                case /* abi.PullMessage pullmessage */ 3:
                    message.requestCmd = {
                        oneofKind: "pullmessage",
                        pullmessage: PullMessage.internalBinaryRead(reader, reader.uint32(), options, (message.requestCmd as any).pullmessage)
                    };
                    break;
                case /* abi.CheckBroker checkbroker */ 4:
                    message.requestCmd = {
                        oneofKind: "checkbroker",
                        checkbroker: CheckBroker.internalBinaryRead(reader, reader.uint32(), options, (message.requestCmd as any).checkbroker)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* abi.AddConfig addconfig = 1; */
        if (message.requestCmd.oneofKind === "addconfig")
            AddConfig.internalBinaryWrite(message.requestCmd.addconfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* abi.ListConfig listconfig = 2; */
        if (message.requestCmd.oneofKind === "listconfig")
            ListConfig.internalBinaryWrite(message.requestCmd.listconfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* abi.PullMessage pullmessage = 3; */
        if (message.requestCmd.oneofKind === "pullmessage")
            PullMessage.internalBinaryWrite(message.requestCmd.pullmessage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* abi.CheckBroker checkbroker = 4; */
        if (message.requestCmd.oneofKind === "checkbroker")
            CheckBroker.internalBinaryWrite(message.requestCmd.checkbroker, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("abi.Response", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { status: "", data: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* string data */ 2:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string data = 2; */
        if (message.data !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddConfig$Type extends MessageType<AddConfig> {
    constructor() {
        super("abi.AddConfig", [
            { no: 1, name: "cfg", kind: "message", T: () => Config }
        ]);
    }
    create(value?: PartialMessage<AddConfig>): AddConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddConfig): AddConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* abi.Config cfg */ 1:
                    message.cfg = Config.internalBinaryRead(reader, reader.uint32(), options, message.cfg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* abi.Config cfg = 1; */
        if (message.cfg)
            Config.internalBinaryWrite(message.cfg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.AddConfig
 */
export const AddConfig = new AddConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckBroker$Type extends MessageType<CheckBroker> {
    constructor() {
        super("abi.CheckBroker", [
            { no: 1, name: "broker", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckBroker>): CheckBroker {
        const message = { broker: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckBroker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckBroker): CheckBroker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string broker */ 1:
                    message.broker = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckBroker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string broker = 1; */
        if (message.broker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.broker);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.CheckBroker
 */
export const CheckBroker = new CheckBroker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListConfig$Type extends MessageType<ListConfig> {
    constructor() {
        super("abi.ListConfig", []);
    }
    create(value?: PartialMessage<ListConfig>): ListConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListConfig): ListConfig {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.ListConfig
 */
export const ListConfig = new ListConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullMessage$Type extends MessageType<PullMessage> {
    constructor() {
        super("abi.PullMessage", [
            { no: 1, name: "cfg", kind: "message", T: () => Config }
        ]);
    }
    create(value?: PartialMessage<PullMessage>): PullMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PullMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullMessage): PullMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* abi.Config cfg */ 1:
                    message.cfg = Config.internalBinaryRead(reader, reader.uint32(), options, message.cfg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* abi.Config cfg = 1; */
        if (message.cfg)
            Config.internalBinaryWrite(message.cfg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message abi.PullMessage
 */
export const PullMessage = new PullMessage$Type();
